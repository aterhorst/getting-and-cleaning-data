args(lm)
args(sd)
install.packages("plyr")
setwd("C:/Users/ter053/ownCloud/Coursera/Getting and Cleaning Data/project/getdata-projectfiles-UCI HAR Dataset/UCI HAR Dataset")
setwd("C:/Users/ter053/ownCloud/Coursera/Getting and Cleaning Data/project/getdata-projectfiles-UCI HAR Dataset/UCI HAR Dataset")
getwd()
setwd("~/ownCloud/Coursera/Getting and Cleaning Data/project/getdata-projectfiles-UCI HAR Dataset/UCI HAR Dataset")
library(plyr)
# Merge training and test data
act_labels <- read.table("./activity_labels.txt", header = F)
colnames(act_labels) <- c("id", "description")
x_labels <- readLines("./features.txt")
## Load and transform training data
x_train <- read.table("./train/X_train.txt", header=F)
names(x_train) <- x_labels
subject_train <- as.data.frame(readLines("./train/subject_train.txt"))
colnames(subject_train) <- "subject"
activity_train <- read.table("./train/y_train.txt", header = F)
colnames(activity_train) <- "id"
train <- cbind(subject_train,activity_train,x_train)
combine <- arrange(join(train,act_labels),id)
head(combine[,1:4])
head(combine[,560:564])
head(combine[,c(1:4,560:564)],20)
head(combine[,c(1:2,562:564)],200)
tail(combine[,c(1:2,562:564)],200)
combine <- arrange(join(act_labels,train),id)
head(combine[,c(1:4,562:564)],200)
mrg_train <- arrange(join(act_labels,train),id)
x_test <- read.table("./test/X_test.txt", header=F)
names(x_test) <- x_labels
subject_test <- as.data.frame(readLines("./test/subject_test.txt"))
colnames(subject_test) <- "subject"
activity_test <- read.table("./test/y_test.txt", header = F)
colnames(activity_test) <- "id"
test <- cbind(subject_test,activity_test,x_test)
mrg_test <- arrange(join(act_labels,test),id)
combine <- merge(mrg_train, mrg_test, all.x =T, all.y = T)
head(combine[,c(1:4,562:564)],50)
combine <- subset(combine[,-"id"])
combine <- subset(combine[,-combine$id])
head(combine[,c(1:4,562:564)],50)
head(combine[,c(1:4,550)],50)
combine <- merge(mrg_train, mrg_test, all.x =T, all.y = T)
combine$id <- NULL
head(combine[,c(1:4,550)],50)
combine[,c(2,1,3:563)]
head(combine[,c(1:4,550)],50)
combine <- merge(mrg_train, mrg_test, all.x =T, all.y = T)
combine$id <- NULL
combine <- combine[,c(2,1,3:563)]
head(combine[,c(1:4,550)],50)
extract <- combine[,grep("mean|std", names(combine))]
head(extract[,c(1:10)],50)
head(extract)
head(combine[,c(1:4,550)],50)
extract <- combine[,grep("mean|std|subject|description", names(combine))]
head(extract[,c(1:10)],50)
tail(extract[,c(1:3)],50)
tail(extract[,c(1:3)],4000:4500)
tail(extract[,c(1:3)],500)
pwd()
gwtwd()
?setwd()
getwd()
colnames(x_test) <- x_labels # add header information
names(x_test)
x_train <- read.table("./train/X_train.txt", header=F)  # read in source measurements
colnames(x_train) <- x_labels # add header information
subject_train <- as.data.frame(readLines("./train/subject_train.txt"))  # read in subjects
colnames(subject_train) <- "subject" # add header information
activity_train <- read.table("./train/y_train.txt", header = F)
colnames(activity_train) <- "id"   # add header information (use for merging later)
train <- cbind(subject_train,activity_train,x_train) # combine data frames horizontally
mrg_train <- arrange(join(act_labels,train),id) # replace activity numbers with descriptive strings
write.table("./tidy_data1.txt", sep = "\t", header = T)
?write.table()
write.table(extract, "./tidy_data1.txt", sep = "\t", col.names = T)
>melt()
?melt()
install.packages("reshape")
library(plyr,reshape)
melted <- melt(extract, id=c("subject","description"))
library(reshape)
library(plyr)
library(reshape)
melted <- melt(extract, id=c("subject","description"))
head(melted)
data <- dcast(melted,description ~ variable)
install.packages("reshape2")
library(reshape2)
data <- dcast(melted,description ~ variable)
head(data)
data <- dcast(melted,description ~ variable)
data <- dcast(melted,description ~ variable, mean)
head(data)
head(data[1],20)
head(data[1:20],20)
data <- dcast(melted,c("subject", "description") ~ variable, mean)
?dcast()
data <- dcast(melted, subject ~ variable, mean)
data <- dcast(melted, subject ~ description ~ variable, mean)
data <- acast(melted, subject ~ description ~ variable, mean)
head(data)
data <- dcast(melted, subject+description ~ variable, mean)
head(data)
names(data)
data <- dcast(melted, subject+description ~ variable, mean)
write.csv(data, "./tidy_data.csv", col.names = T)
?write.csv()
write.csv(data, file = "./tidy_data.csv")
data[order(data[,1], ]
write.csv(data, file = "./tidy_data.csv", row.names = F)
data[order(data$subject, ]
data[order(data$subject), ]
data[order(data$subject), ]
data <- data[order(data$subject), ]
write.csv(data, file = "./tidy_data.csv", row.names = F)
data[,data$subject] <- as.numeric(data$subject)
class(data)
str(data)
data <- data[order(as.numeric(data$subject), ]
data <- data[order(as.numeric(data$subject)), ]
write.csv(data, file = "./tidy_data.csv", row.names = F)
data <- data[order(as.numeric(as.character(data$subject)), ]
data <- data[order(as.numeric(as.character(data$subject))), ]
write.csv(data, file = "./tidy_data.csv", row.names = F)
write.table(data, file = "./tidy_data.txt", sep = "\t", col.names = T, row.names = F) # generate tidy data set
library(kntr)
library(knitr)
install.packages("knitr")
library(knitr)
?knitr()
class(data)
str(data)
summary(data)
summary(data)
install.packages("memisc")
library(memisc)
codebook(data)
?codebook()
library(memisc)
codebook(data)
?memisc
show(data)
code <- show(data)
code <- show(data)
head(code)
codebook(data)
code <- str(data)
codebook(code)
install.packages("psych")
library(psych)
describe(data)
install.packages("Hmisc")
library(Hmisc)
describe.data.frame(data)
table(data)
>model.frame.default()
?model.frame.default()
model.frame.default(data)
x_labels <- readLines("./features.txt") # read in measurement header information
head(x_labels)
tail(x_labels)
?substr()
?strtrim()
?substr()
names(x_labels) <- gsub("[[:digit:]]", "", names(x_labels))
head(x_labels)
x_labels <- readLines("./features.txt") # read in measurement header information
head(x_labels)
names(x_labels) <- gsub("[[:digit:]]", "", names(x_labels))
head(x_labels)
?gsub()
names(x_labels) <- gsub("[0-9]+", "", names(x_labels))
head(x_labels)
col.names(x_labels) <- gsub([[:digit;]], "", names(x_labels))
col.names(x_labels) <- gsub([[:digit:]], "", names(x_labels))
names(data) <- gsub("[[:digit:]]", "", names(data))
head(data)
write.table(data, file = "./tidy_data.txt", sep = "\t", col.names = T, row.names = F) # generate tidy data set
?library()
setwd("C:/Users/ter053/ownCloud/Coursera/Getting and Cleaning Data/project")
setwd("~/ownCloud/Coursera/Getting and Cleaning Data/project")
setwd("~/ownCloud/Coursera/Getting and Cleaning Data/project")
# Merge training and test data
act_labels <- read.table("./activity_labels.txt", header = F) # read in activity numbers and corresponding descriptions
setwd("~/ownCloud/Coursera/Getting and Cleaning Data/project")
# Merge training and test data
act_labels <- read.table("./UCI HAR Dataset/activity_labels.txt", header = F) # read in activity numbers and corresponding descriptions
colnames(act_labels) <- c("id", "description") # add header information (id used for merging later)
x_labels <- readLines("./UCI HAR Dataset/features.txt") # read in measurement header information
## Load and transform training data
x_train <- read.table("./train/X_train.txt", header=F)  # read in source measurements
x_train <- read.table("./UCI HAR Dataset/train/X_train.txt", header=F)  # read in source measurements
colnames(x_train) <- x_labels # add header information
subject_train <- as.data.frame(readLines("./UCI HAR Dataset/train/subject_train.txt"))  # read in subjects
colnames(subject_train) <- "subject" # add header information
activity_train <- read.table("./UCI HAR Dataset/train/y_train.txt", header = F)
colnames(activity_train) <- "id"   # add header information (use for merging later)
train <- cbind(subject_train,activity_train,x_train) # combine data frames horizontally
mrg_train <- arrange(join(act_labels,train),id) # replace activity numbers with descriptive strings
## Load and transform test data
x_test <- read.table("./UCI HAR Dataset/test/X_test.txt", header=F)  # read in source measurements
colnames(x_test) <- x_labels # add header information
subject_test <- as.data.frame(readLines("./UCI HAR Dataset/test/subject_test.txt"))  # read in subjects
colnames(subject_test) <- "subject" # add header information
activity_test <- read.table("./UCI HAR Dataset/test/y_test.txt", header = F)
colnames(activity_test) <- "id"   # add header information (use for merging later)
test <- cbind(subject_test,activity_test,x_test) # combine data frames horizontally
mrg_test <- arrange(join(act_labels,test),id) # replace activity numbers with descriptive strings
## Combine training and test data
combine <- merge(mrg_train, mrg_test, all.x =T, all.y = T) # create merged data set
combine$id <- NULL # remove "id" as no longer needed
combine <- combine[,c(2,1,3:563)] # reorder columns
extract <- combine[,grep("mean|std|subject|description", names(combine))] # extract subject, activity description, mean and std deviations only
write.table(extract, "./tidy_data1.txt", sep = "\t", col.names = T) # write interim data file to working directory
# Reshape data for analysis
melted <- melt(extract, id=c("subject","description")) # generate skinny data frame
data <- dcast(melted, subject+description ~ variable, mean) # summarise data
data <- data[order(as.numeric(as.character(data$subject))), ]  # sort on subject
names(data) <- gsub("[[:digit:]]", "", names(data)) # remove numbers in measurement headers
write.table(data, file = "./tidy_data.txt", sep = "\t", col.names = T, row.names = F) # generate tidy data set
setwd("~/ownCloud/Coursera/Getting and Cleaning Data/project")
setwd("~/ownCloud/Coursera/Getting and Cleaning Data/project")
setwd("~/ownCloud/Coursera/Getting and Cleaning Data/project")
setwd("~/ownCloud/Coursera/Getting and Cleaning Data/project")
setwd("~/ownCloud/Coursera/Getting and Cleaning Data/project")
# Merge training and test data
act_labels <- read.table("./UCI HAR Dataset/activity_labels.txt", header = F) # read in activity numbers and corresponding descriptions
colnames(act_labels) <- c("id", "description") # add header information (id used for merging later)
x_labels <- readLines("./UCI HAR Dataset/features.txt") # read in measurement header information
## Load and transform training data
x_train <- read.table("./UCI HAR Dataset/train/X_train.txt", header=F)  # read in source measurements
colnames(x_train) <- x_labels # add header information
subject_train <- as.data.frame(readLines("./UCI HAR Dataset/train/subject_train.txt"))  # read in subjects
colnames(subject_train) <- "subject" # add header information
activity_train <- read.table("./UCI HAR Dataset/train/y_train.txt", header = F)
colnames(activity_train) <- "id"   # add header information (use for merging later)
train <- cbind(subject_train,activity_train,x_train) # combine data frames horizontally
mrg_train <- arrange(join(act_labels,train),id) # replace activity numbers with descriptive strings
## Load and transform test data
x_test <- read.table("./UCI HAR Dataset/test/X_test.txt", header=F)  # read in source measurements
colnames(x_test) <- x_labels # add header information
subject_test <- as.data.frame(readLines("./UCI HAR Dataset/test/subject_test.txt"))  # read in subjects
colnames(subject_test) <- "subject" # add header information
activity_test <- read.table("./UCI HAR Dataset/test/y_test.txt", header = F)
colnames(activity_test) <- "id"   # add header information (use for merging later)
test <- cbind(subject_test,activity_test,x_test) # combine data frames horizontally
mrg_test <- arrange(join(act_labels,test),id) # replace activity numbers with descriptive strings
## Combine training and test data
combine <- merge(mrg_train, mrg_test, all.x =T, all.y = T) # create merged data set
combine$id <- NULL # remove "id" as no longer needed
combine <- combine[,c(2,1,3:563)] # reorder columns
extract <- combine[,grep("mean|std|subject|description", names(combine))] # extract subject, activity description, mean and std deviations only
write.table(extract, "./tidy_data1.txt", sep = "\t", col.names = T) # write interim data file to working directory
# Reshape data for analysis
melted <- melt(extract, id=c("subject","description")) # generate skinny data frame
data <- dcast(melted, subject+description ~ variable, mean) # summarise data
data <- data[order(as.numeric(as.character(data$subject))), ]  # sort on subject
names(data) <- gsub("[[:digit:]]", "", names(data)) # remove numbers in measurement headers
write.table(data, file = "./tidy_data.txt", sep = "\t", col.names = T, row.names = F) # generate tidy data set
?describe()
contents.data.frame(data)
contents(data)
contents.list(data)
describe.data.frame(data)
metadata <- contents.data.frame(data)
metadata
str(metadata)
class(metadata)
write.table(metadata, file "./tidy_data_metadata.txt", sep = "\t")
write.table(metadata, file = "./tidy_data_metadata.txt", sep = "\t")
print(metadata)
?sink()
metadata <- contents.data.frame(data)
sink(file = "./tidy_data_metadata.txt")
print(metadata)
sink()
str(data)
?str()
str(data)
describe.data.frame(data)
sink(file = "./tidy_data_metadata.txt")
print.contents.data.frame(data)
sink()
sink(file = "./tidy_data_metadata.txt") # divert R output to text file
print.contents.data.frame(data)
sink() # revert R output to console
data.frame.labelled(data)
label.data.frame(data)
llist(data)
?print.contents.data.frame()
sink(file = "./tidy_data_metadata.txt") # divert R output to text file
print.contents.data.frame(data, levelType="table", number = T)
?contents.data.frame()
sink(file = "./tidy_data_metadata.txt") # divert R output to text file
print.contents.data.frame(data, number = T)
print.contents.data.frame(data, number = TRUE)
print.contents.data.frame(data)
sink() # revert R output to console
source("http://bioconductor.org/biocLite.R")
biocLite()
